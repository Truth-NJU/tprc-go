// Code generated by trpc-go/trpc-go-cmdline v2.4.0. DO NOT EDIT.
// source: online.proto

package online

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// MessageService defines service.
type MessageService interface {
	SendMessage(ctx context.Context, req *MessageRequest) (*MessageResponse, error)
}

func MessageService_SendMessage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &MessageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(MessageService).SendMessage(ctx, reqbody.(*MessageRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// MessageServer_ServiceDesc descriptor for server.RegisterService.
var MessageServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.test.online.Message",
	HandlerType: ((*MessageService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.test.online.Message/SendMessage",
			Func: MessageService_SendMessage_Handler,
		},
	},
}

// RegisterMessageService registers service.
func RegisterMessageService(s server.Service, svr MessageService) {
	if err := s.Register(&MessageServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Message register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedMessage struct{}

func (s *UnimplementedMessage) SendMessage(ctx context.Context, req *MessageRequest) (*MessageResponse, error) {
	return nil, errors.New("rpc SendMessage of service Message is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// MessageClientProxy defines service client proxy
type MessageClientProxy interface {
	SendMessage(ctx context.Context, req *MessageRequest, opts ...client.Option) (rsp *MessageResponse, err error)
}

type MessageClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewMessageClientProxy = func(opts ...client.Option) MessageClientProxy {
	return &MessageClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *MessageClientProxyImpl) SendMessage(ctx context.Context, req *MessageRequest, opts ...client.Option) (*MessageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.test.online.Message/SendMessage")
	msg.WithCalleeServiceName(MessageServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("test")
	msg.WithCalleeServer("online")
	msg.WithCalleeService("Message")
	msg.WithCalleeMethod("SendMessage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &MessageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
